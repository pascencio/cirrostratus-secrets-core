// Code generated by MockGen. DO NOT EDIT.
// Source: ports/service.go

// Package mock is a generated GoMock package.
package mock

import (
	command "cirrostratus-secrets-core/command"
	domain "cirrostratus-secrets-core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretService) Create(arg0 domain.Secret, arg1 domain.IdentityID) (domain.SecretID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.SecretID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSecretService) Delete(arg0 domain.SecretID, arg1 domain.IdentityID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSecretService) Get(arg0 domain.SecretID, arg1 domain.IdentityID) (domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretService)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockSecretService) GetAll(arg0 command.PageRequest, arg1 domain.IdentityID) ([]domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSecretServiceMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSecretService)(nil).GetAll), arg0, arg1)
}

// Reveal mocks base method.
func (m *MockSecretService) Reveal(arg0 domain.SecretID, arg1 domain.IdentityID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reveal", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reveal indicates an expected call of Reveal.
func (mr *MockSecretServiceMockRecorder) Reveal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reveal", reflect.TypeOf((*MockSecretService)(nil).Reveal), arg0, arg1)
}

// Update mocks base method.
func (m *MockSecretService) Update(arg0 domain.SecretID, arg1 domain.Secret, arg2 domain.IdentityID) (domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecretServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretService)(nil).Update), arg0, arg1, arg2)
}

// MockKeyService is a mock of KeyService interface.
type MockKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServiceMockRecorder
}

// MockKeyServiceMockRecorder is the mock recorder for MockKeyService.
type MockKeyServiceMockRecorder struct {
	mock *MockKeyService
}

// NewMockKeyService creates a new mock instance.
func NewMockKeyService(ctrl *gomock.Controller) *MockKeyService {
	mock := &MockKeyService{ctrl: ctrl}
	mock.recorder = &MockKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyService) EXPECT() *MockKeyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeyService) Create(arg0 domain.Key, arg1 domain.IdentityID) (domain.KeyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.KeyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKeyServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyService)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockKeyService) Get(arg0 domain.KeyID, arg1 domain.IdentityID) (domain.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyService)(nil).Get), arg0, arg1)
}

// MockAuditoryService is a mock of AuditoryService interface.
type MockAuditoryService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditoryServiceMockRecorder
}

// MockAuditoryServiceMockRecorder is the mock recorder for MockAuditoryService.
type MockAuditoryServiceMockRecorder struct {
	mock *MockAuditoryService
}

// NewMockAuditoryService creates a new mock instance.
func NewMockAuditoryService(ctrl *gomock.Controller) *MockAuditoryService {
	mock := &MockAuditoryService{ctrl: ctrl}
	mock.recorder = &MockAuditoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditoryService) EXPECT() *MockAuditoryServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAuditoryService) Add(arg0 domain.Auditory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockAuditoryServiceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAuditoryService)(nil).Add), arg0)
}

// New mocks base method.
func (m *MockAuditoryService) New(arg0 domain.IdentityID, arg1 domain.Action) (domain.Auditory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(domain.Auditory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockAuditoryServiceMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAuditoryService)(nil).New), arg0, arg1)
}

// NewFrom mocks base method.
func (m *MockAuditoryService) NewFrom(arg0 domain.Auditory, arg1 domain.IdentityID, arg2 domain.Action) (domain.Auditory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFrom", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Auditory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFrom indicates an expected call of NewFrom.
func (mr *MockAuditoryServiceMockRecorder) NewFrom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFrom", reflect.TypeOf((*MockAuditoryService)(nil).NewFrom), arg0, arg1, arg2)
}
