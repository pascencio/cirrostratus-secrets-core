// Code generated by MockGen. DO NOT EDIT.
// Source: ports/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	command "cirrostratus-secrets-core/command"
	domain "cirrostratus-secrets-core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepository is a mock of SecretRepository interface.
type MockSecretRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepositoryMockRecorder
}

// MockSecretRepositoryMockRecorder is the mock recorder for MockSecretRepository.
type MockSecretRepositoryMockRecorder struct {
	mock *MockSecretRepository
}

// NewMockSecretRepository creates a new mock instance.
func NewMockSecretRepository(ctrl *gomock.Controller) *MockSecretRepository {
	mock := &MockSecretRepository{ctrl: ctrl}
	mock.recorder = &MockSecretRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepository) EXPECT() *MockSecretRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretRepository) Create(arg0 domain.Secret) (domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSecretRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockSecretRepository) Get(arg0 string) (domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretRepository)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockSecretRepository) GetAll(arg0 command.PageRequest) ([]domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSecretRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSecretRepository)(nil).GetAll), arg0)
}

// Update mocks base method.
func (m *MockSecretRepository) Update(arg0 string, arg1 domain.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretRepository)(nil).Update), arg0, arg1)
}

// MockKeyRepository is a mock of KeyRepository interface.
type MockKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepositoryMockRecorder
}

// MockKeyRepositoryMockRecorder is the mock recorder for MockKeyRepository.
type MockKeyRepositoryMockRecorder struct {
	mock *MockKeyRepository
}

// NewMockKeyRepository creates a new mock instance.
func NewMockKeyRepository(ctrl *gomock.Controller) *MockKeyRepository {
	mock := &MockKeyRepository{ctrl: ctrl}
	mock.recorder = &MockKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepository) EXPECT() *MockKeyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeyRepository) Create(arg0 string) (domain.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKeyRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockKeyRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockKeyRepository) Get(arg0 string) (domain.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyRepository)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockKeyRepository) GetAll(arg0 command.PageRequest) ([]domain.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]domain.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockKeyRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockKeyRepository)(nil).GetAll), arg0)
}

// Update mocks base method.
func (m *MockKeyRepository) Update(arg0 string, arg1 domain.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKeyRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeyRepository)(nil).Update), arg0, arg1)
}

// MockAuditoryRepository is a mock of AuditoryRepository interface.
type MockAuditoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditoryRepositoryMockRecorder
}

// MockAuditoryRepositoryMockRecorder is the mock recorder for MockAuditoryRepository.
type MockAuditoryRepositoryMockRecorder struct {
	mock *MockAuditoryRepository
}

// NewMockAuditoryRepository creates a new mock instance.
func NewMockAuditoryRepository(ctrl *gomock.Controller) *MockAuditoryRepository {
	mock := &MockAuditoryRepository{ctrl: ctrl}
	mock.recorder = &MockAuditoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditoryRepository) EXPECT() *MockAuditoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditoryRepository) Create(arg0 domain.Auditory) (domain.Auditory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Auditory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuditoryRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditoryRepository)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockAuditoryRepository) Get(arg0 string) (domain.Auditory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Auditory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuditoryRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuditoryRepository)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockAuditoryRepository) GetAll(arg0 command.PageRequest) ([]domain.Auditory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]domain.Auditory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAuditoryRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAuditoryRepository)(nil).GetAll), arg0)
}
